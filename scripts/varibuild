#!/bin/sh -eu
# Automation of Variscite's official yocto build instructions to help reproduce issues
#
#     Usage: varibuild HOST_WORK_DIR CONTAINER_COMMAND [ARG [...]]
#

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
ROOT_DIR="$(dirname $SCRIPT_DIR)"
VARHOSTDOCKERPATH="$HOME/var-host-docker-containers"

# User change these

# Going back to old internal sstate dir after proving issue was not sstate.
# HOST_DL_DIR=/mnt/wsl/internal-4tb-nvme/dl_dir
# HOST_SSTATE_DIR=/mnt/wsl/internal-4tb-nvme/sstate_dir

# Starting fresh with new sstate/dl dirs to test theory about persistent esdk build failure
HOST_DL_DIR=/mnt/wsl/ext-tb4-4tb-nvme-1/dl_dir
HOST_SSTATE_DIR=/mnt/wsl/ext-tb4-4tb-nvme-1/sstate_dir

HOST_WORK_DIR="varibuild-$(date +"%Y-%m-%d-%H-%M-%S")"
[ $# -gt 0 ] && HOST_WORK_DIR="$1" && shift  # use the specified build dir arg
HOST_WORK_DIR=$(readlink -m $HOST_WORK_DIR)
mkdir -p $HOST_WORK_DIR
cd $HOST_WORK_DIR
printf "Entered host work dir %s...\n" "$(pwd)"

# # For performance reasons, it may be useful to place oebuild dir on a specific disk
# #   - This is mapped in the container to /opt/oebuild
# # HOST_OEBUILD_DIR=$HOST_WORK_DIR/oebuild  # put oebuild in subdir of work dir
# # This puts oebuild in subdir of custom root location, subdir named after work dir basename
# #   - In this case, the host work dir (where repo-tool and sources reside) and oebuild dir may be on separate disks
# HOST_OEBUILD_ROOT=/mnt/wsl/internal-4tb-nvme/varibuild-oebuild-dirs
# HOST_OEBUILD_DIR=$HOST_OEBUILD_ROOT/$(basename $HOST_WORK_DIR)
#
# related docker volume:
#        -v $HOST_OEBUILD_DIR:/opt/oebuild \

main() {

    # Get Variscite's docker project if we haven't already
    if ! [ -d "$VARHOSTDOCKERPATH" ]; then
        git clone https://github.com/varigit/var-host-docker-containers.git "$VARHOSTDOCKERPATH"
    fi

    # Color doesn't work in variscite container bc run.sh doesn't use --tty.
    # So here we directly modify the script to add --tty arg if necessary.
    if ! grep -E '^\s*docker\s*run' -A1 "$VARHOSTDOCKERPATH"/run.sh | grep -- --tty "$VARHOSTDOCKERPATH"/run.sh 2>&1 >/dev/null; then
        sed -i '/^\s*docker\s*run/a \ \ \ \ --tty \\'  "$VARHOSTDOCKERPATH"/run.sh
    fi
    # Insert 'set -x' before the docker run command so it is echoed for viewing
    if ! grep -E '^\s*docker\s*run' -B1 "$VARHOSTDOCKERPATH"/run.sh | grep -- 'set -x' "$VARHOSTDOCKERPATH"/run.sh 2>&1 >/dev/null; then
        sed -i '/^\s*docker\s*run/i set -x'  "$VARHOSTDOCKERPATH"/run.sh
    fi
    # TODO: update dockerfile with ENV TERM xterm-256color  ??

    # Run container-build-command in Variscite's Ubuntu 22.04 container
    #
    #   Notes:
    #     - Remaining args are passed to container to run
    #     - Mounts specified host dirs to DL/SSTATE_DIRs inside container
    #       - Customize or remove these as necessary, but note that the site.conf
    #         used in the build unconditionally uses these locations in /opt
    #     - Mounts this repo's root to /opt/hostroot to reduce container context
    #       and allow running custom code in the container without rebuilding it.
    #
    # Set --command arg string if there are remaining varibuild args, else empty should run shell
    # TODO: this isn't working bc of the way run.sh parses args?
    # (( $# > 0 )) && CMDARG="--command '/opt/hostroot/scripts/container-build-command $*'"
    set -x
    "$VARHOSTDOCKERPATH"/run.sh -b -u 22.04 -w $(pwd) -e "$ROOT_DIR"/.env \
        -v $HOST_DL_DIR:/opt/dl_dir \
        -v $HOST_SSTATE_DIR:/opt/sstate_dir \
        -v "$ROOT_DIR":/opt/hostroot \
        --command "/opt/hostroot/scripts/container-build-command $*"
        #${CMDARG:-}
}
main "$@"
