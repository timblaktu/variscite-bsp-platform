DL_DIR ?= "/opt/dl_dir"
SSTATE_DIR ?= "/opt/sstate_dir"
# SSTATE_MIRRORS ?= "file://.* file:///opt/sstate_mirror/PATH"

# Enable local PR Service to ensure monotonically-increasing package versions
PRSERV_HOST = "localhost:0"

# Maintain local git repo containing build history details
#   - https://docs.yoctoproject.org/5.0.5/dev-manual/build-quality.html
INHERIT += "buildhistory"
BUILDHISTORY_COMMIT = "1"

# Record performance statistics for each build task
#   - You can analyze the elapsed time using scripts/pybootchartgui/pybootchartgui.py
INHERIT += "buildstats"
BUILDSTATS_BASE = "/workdir/buildstats/"

# Print summary of sstate cache stats after each build
INHERIT += "buildstats-summary"

# Distributed Build Configuration
#
#   Notes:
#     - Requirements: 
#       - https://variwiki.com/index.php?title=Yocto_Common_Errors#Required_RAM
#     - PARALLEL_MAKE
#       - This is not just passed to GNU make, but other build tools like meson and ninja.
#       - This must contain only args that are supported by all these tools, e.g.:
#         - must use -j/-l and not --jobs/--max-load bc meson/ninja only support shortopts
#     - BB_PRESSURE_MAX_CPU
#       - What is this?
#         - https://www.kernel.org/doc/html/latest/accounting/psi.html#pressure-interface
#       - Enable /proc/pressure in WSL/kernel:
#         - https://github.com/microsoft/WSL2-Linux-Kernel/blob/e458890574d4b6d635880180ef9e5d2b621ff577/init/Kconfig#L639
#      - BB_HASHSERVE = "<HOSTNAME>:<PORT>"
#         - https://docs.yoctoproject.org/singleindex.html#hash-equivalence
#
BB_NUMBER_THREADS = "12"
BB_NUMBER_PARSE_THREADS = "12"
# TODO: figure out how to properly OVERRIDE PARALLEL_MAKE for specific recipe
#       see Notes above and https://lists.yoctoproject.org/g/yocto/message/58178
PARALLEL_MAKE = "-j 12"
# PARALLEL_MAKE = "-j 12 -l 16"
#BB_PRESSURE_MAX_CPU = "1000"

BB_GENERATE_MIRROR_TARBALLS = "1"
# Set these up once we're using a network cache for source tarballs
# PREMIRRORS =
# INHERIT += "own-mirrors"

# Test Assertion relatd Config
# BB_NO_NETWORK = "1"
# BB_FETCH_PREMIRRORONLY = "1"
# SSTATE_MIRROR_ALLOW_NETWORK = "1"

# # Test Automation
# #
# #   - Base test suite resides in sources/poky/meta/lib/oeqa/runtime/cases.
# #   - Xilica layers add their own tests in same path under sources/<xilica-layer>/
# #   - TEST_SUITES bb var dictates what tests are run
# #   - When TEST_SUITES contains "auto", bb automatically chooses which tests to run
# #     based on the image's features and included packages.
# #   - https://docs.yoctoproject.org/5.0.5/dev-manual/runtime-testing.html
# #
# TEST_SUITES:append = " auto"
# # Automatically run tests after successful image creation
# TESTIMAGE_AUTO = "1"
# # Alternatively, tests may be run manually by inheriting testimage class
# #IMAGE_CLASSES += "testimage" 
# #bitbake -c testimage $TARGET
# TEST_TARGET = "xilica-tr"
# TEST_TARGET_IP = "10.0.22.2"
# TEST_POWERCONTROL_CMD = "~/bin/poecycle"
# TEST_SERIALCONTROL_CMD = " \
# sudo killall picocom; \
# sudo picocom -b 115200 -d8 -p1 -fn -pn /dev/ttyUSB0 \
# "

# Set this to 'commercial' to pull in packages with restricted licensing,
# like commercial gstreamer plugins.
#   - https://github.com/Freescale/meta-freescale-distro/blob/f7be03965e7a0563761a73d5f3988cd9be40d3e9/recipes-fsl/packagegroups/packagegroup-fsl-gstreamer1.0-full.bb
# LICENSE_FLAGS_ACCEPTED = "commercial"

# Append env vars used in recipes, appends, conf, etc, to bitbake's
# list of vars that shall survive its thorough environment scrub.
#   - https://docs.yoctoproject.org/bitbake/2.8/bitbake-user-manual/bitbake-user-manual-metadata.html#passing-information-into-the-build-task-environment
#
export BB_ENV_PASSTHROUGH_ADDITIONS="XILICA_TR_BUILDSTAMP RECOVERY_SDCARD_IMAGE_URL"
export XILICA_TR_BUILDSTAMP
export RECOVERY_SDCARD_IMAGE_URL
